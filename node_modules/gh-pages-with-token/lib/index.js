#!/usr/bin/env node
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.spawnGhPages = exports.cli = undefined;

var _ghPages = require('gh-pages');

var _ghPages2 = _interopRequireDefault(_ghPages);

var _gitRemoteOriginUrl = require('git-remote-origin-url');

var _gitRemoteOriginUrl2 = _interopRequireDefault(_gitRemoteOriginUrl);

var _meow = require('meow');

var _meow2 = _interopRequireDefault(_meow);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var cli = exports.cli = (0, _meow2.default)('\n  Usage\n    $ gh-pages-with-token\n\n  Options\n    -d, --dist <dist>        Base directory for all source files\n    -s, --src <src>          Pattern to select which files should be published\n    -x, --silent             Do not output the repository url\n    -b, --branch <branch>    Name of the branch you\'ll be pushing to\n    -o, --remote <name>      The name of the remote\n    -m, --message <message>  Commit message\n    -t, --dotfiles           Include dotfiles\n    -a, --add                Only add, and never remove existing files\n    -n, --no-push            Commit only (with no push)\n', {
  alias: {
    d: 'dist',
    s: 'src',
    x: 'silent',
    b: 'branch',
    o: 'remote',
    m: 'message',
    t: 'dotfiles',
    a: 'add',
    n: 'no-push'
  },
  default: {
    src: '**/*',
    branch: 'gh-pages',
    remote: 'origin',
    message: 'Updates'
  }
});

var spawnGhPages = exports.spawnGhPages = function spawnGhPages(url) {
  var repo = url.replace(/(\/\/)/, '$1' + process.env.GH_TOKEN + '@');
  var flags = cli.flags;


  _ghPages2.default.publish(_path2.default.join(process.cwd(), flags.dist), {
    repo: repo,
    silent: !!flags.silent,
    branch: flags.branch,
    src: flags.src,
    message: flags.message,
    dotfiles: !!flags.dotfiles,
    add: !!flags.add,
    remote: flags.remote,
    push: !flags.noPush,
    logger: function logger(message) {
      process.stderr.write(message + '\n');
    }
  }, function (publishErr) {
    if (publishErr) {
      process.stderr.write(publishErr.message + '\n');

      return process.exit(1);
    }

    process.stderr.write('Published\n');

    return process.exit(0);
  });
};

if (!cli.input.length) {
  (0, _gitRemoteOriginUrl2.default)().then(spawnGhPages);
}