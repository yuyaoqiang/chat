(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global.preactRenderToJSON = factory());
}(this, (function () {

var falsey = function (v) {
	return v == null || v === false;
};

function assign(obj, props) {
	for (var i in props) {
		obj[i] = props[i];
	}return obj;
}

function getNodeProps(vnode) {
	var defaultProps = vnode.nodeName.defaultProps,
	    props = assign({}, defaultProps || vnode.attributes);
	if (defaultProps) assign(props, vnode.attributes);
	if (vnode.children) props.children = vnode.children;
	return props;
}

var omit = function (object, paths) {
	return Object.keys(object).reduce(function (result, key) {
		if (!paths.includes(key)) {
			result[key] = object[key];
		}

		return result;
	}, {});
};

var SHALLOW = { shallow: true };

var UNNAMED = [];

var EMPTY = {};

renderToJSON.render = renderToJSON;

var shallowRender = function (vnode, context) {
	return renderToJSON(vnode, context, SHALLOW);
};

function renderToJSON(vnode, context, opts, inner) {
	var _ref = vnode || EMPTY,
	    nodeName = _ref.nodeName,
	    attributes = _ref.attributes,
	    children = _ref.children,
	    isComponent = false;

	context = context || {};
	opts = opts || {};

	if (vnode == null || vnode === false) {
		return null;
	}

	if (!nodeName) {
		return vnode;
	}

	if (typeof nodeName === 'function') {
		isComponent = true;
		if (opts.shallow && (inner || opts.renderRootComponent === false)) {
			nodeName = getComponentName(nodeName);
		} else {
			var props = getNodeProps(vnode),
			    rendered = void 0;

			if (!nodeName.prototype || typeof nodeName.prototype.render !== 'function') {
				rendered = nodeName(props, context);
			} else {
				var c = new nodeName(props, context);

				c._disable = c.__x = true;
				c.props = props;
				c.context = context;
				if (c.componentWillMount) c.componentWillMount();
				rendered = c.render(c.props, c.state, c.context);

				if (c.getChildContext) {
					context = assign(assign({}, context), c.getChildContext());
				}
			}

			return renderToJSON(rendered, context, opts, opts.shallowHighOrder !== false);
		}
	}

	var pieces = [];
	var len = children && children.length;
	for (var i = 0; i < len; i++) {
		var child = children[i];
		if (!falsey(child)) {
			var _ret = renderToJSON(child, context, opts, true);
			if (_ret) pieces.push(_ret);
		}
	}

	var ret = {
		$$typeof: Symbol.for('react.test.json'),
		type: nodeName
	};

	if (attributes) {
		ret.props = omit(attributes, ['key', 'children', 'className']);

		if (attributes.className && !attributes.class) {
			ret.props.class = attributes.className;
		}
	}

	if (attributes && attributes.key) {
		ret.key = attributes.key;
	}

	if (pieces.length) {
		ret.children = pieces;
	}

	return ret;
}

function getComponentName(component) {
	var proto = component.prototype,
	    ctor = proto && proto.constructor;
	return component.displayName || component.name || proto && (proto.displayName || proto.name) || getFallbackComponentName(component);
}

function getFallbackComponentName(component) {
	var str = Function.prototype.toString.call(component),
	    name = (str.match(/^\s*function\s+([^\( ]+)/) || EMPTY)[1];
	if (!name) {
		var index = -1;
		for (var i = UNNAMED.length; i--;) {
			if (UNNAMED[i] === component) {
				index = i;
				break;
			}
		}

		if (index < 0) {
			index = UNNAMED.push(component) - 1;
		}
		name = 'UnnamedComponent' + index;
	}
	return name;
}
renderToJSON.shallowRender = shallowRender;

return renderToJSON;

})));
//# sourceMappingURL=index.js.map
