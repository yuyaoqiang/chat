{"ast":null,"code":"import _initializerDefineProperty from \"/Users/yuanfang/Downloads/Telegram Desktop/\\u5C01\\u5B58/advisory-h5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"/Users/yuanfang/Downloads/Telegram Desktop/\\u5C01\\u5B58/advisory-h5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"/Users/yuanfang/Downloads/Telegram Desktop/\\u5C01\\u5B58/advisory-h5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _temp;\n\nimport { observable, computed, action, makeObservable, autorun } from \"mobx\";\nlet UserState = (_class = (_temp = class UserState {\n  constructor() {\n    _initializerDefineProperty(this, \"pullRed\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"user\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"setPullRed\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"logout\", _descriptor4, this);\n\n    _initializerDefineProperty(this, \"updateUser\", _descriptor5, this);\n\n    makeObservable(this);\n    /**\n     * 刷新页面走缓存\n     */\n\n    autorun(() => {\n      const userStr = sessionStorage.getItem('user');\n\n      if (userStr) {\n        this.updateUser(JSON.parse(userStr));\n      }\n    });\n  }\n\n  get msg() {\n    return `${this.user.mobilePhone}`;\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"pullRed\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return {\n      recommendMatchNum: 0,\n      redListHits: 0\n    };\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"user\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return {\n      isLogin: false,\n      createTime: '',\n      account: '',\n      // 账号\n      fansNumber: 0,\n      // 粉丝数\n      followNumer: 0,\n      // 关注数\n      id: 0,\n      //唯一标识\n      lastLoginTime: '',\n      // 最后登录时间\n      membershipType: 0,\n      mobilePhone: '',\n      // 手机号\n      nickname: '',\n      // 昵称\n      realName: '',\n      // 真实名称\n      recommendMatchNum: 0,\n      // 推荐比赛次数\n      redListHitRate: 0,\n      // 红单率\n      redListHits: 0,\n      // 红单\n      remark: '',\n      // 备注\n      status: 0,\n      // 状态\n      userImg: '',\n      // 用户头像\n      userType: 0 // 用户类型\n\n    };\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"setPullRed\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return (recommendMatchNum, redListHits) => {\n      this.pullRed.recommendMatchNum = recommendMatchNum;\n      this.pullRed.redListHits = redListHits;\n    };\n  }\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"logout\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return () => {\n      this.user.isLogin = false;\n      sessionStorage.clear();\n    };\n  }\n}), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, \"updateUser\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return user => {\n      this.user = user;\n      sessionStorage.setItem('user', JSON.stringify(user));\n    };\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"msg\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"msg\"), _class.prototype)), _class);\nexport default UserState;","map":{"version":3,"sources":["/Users/yuanfang/Downloads/Telegram Desktop/封存/advisory-h5/src/pages/userInfo/stroe.ts"],"names":["observable","computed","action","makeObservable","autorun","UserState","constructor","userStr","sessionStorage","getItem","updateUser","JSON","parse","msg","user","mobilePhone","recommendMatchNum","redListHits","isLogin","createTime","account","fansNumber","followNumer","id","lastLoginTime","membershipType","nickname","realName","redListHitRate","remark","status","userImg","userType","pullRed","clear","setItem","stringify"],"mappings":";;;;;;AAAA,SAASA,UAAT,EAAqBC,QAArB,EAA+BC,MAA/B,EAAuCC,cAAvC,EAAuDC,OAAvD,QAAsE,MAAtE;IACMC,S,sBAAN,MAAMA,SAAN,CAAgB;AACdC,EAAAA,WAAW,GAAG;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AACZH,IAAAA,cAAc,CAAC,IAAD,CAAd;AACA;AACJ;AACA;;AACIC,IAAAA,OAAO,CAAC,MAAM;AACZ,YAAMG,OAAO,GAAGC,cAAc,CAACC,OAAf,CAAuB,MAAvB,CAAhB;;AACA,UAAIF,OAAJ,EAAa;AACX,aAAKG,UAAL,CAAgBC,IAAI,CAACC,KAAL,CAAWL,OAAX,CAAhB;AACD;AACF,KALM,CAAP;AAMD;;AA0CD,MAAcM,GAAd,GAAoB;AAClB,WAAQ,GAAE,KAAKC,IAAL,CAAUC,WAAY,EAAhC;AACD;;AAxDa,C,iFAabf,U;;;;;WAAqB;AACpBgB,MAAAA,iBAAiB,EAAE,CADC;AAEpBC,MAAAA,WAAW,EAAE;AAFO,K;;wEAKrBjB,U;;;;;WAA4B;AAC3BkB,MAAAA,OAAO,EAAE,KADkB;AAE3BC,MAAAA,UAAU,EAAE,EAFe;AAG3BC,MAAAA,OAAO,EAAE,EAHkB;AAGd;AACbC,MAAAA,UAAU,EAAE,CAJe;AAIZ;AACfC,MAAAA,WAAW,EAAE,CALc;AAKX;AAChBC,MAAAA,EAAE,EAAE,CANuB;AAMpB;AACPC,MAAAA,aAAa,EAAE,EAPY;AAOR;AACnBC,MAAAA,cAAc,EAAE,CARW;AAS3BV,MAAAA,WAAW,EAAE,EATc;AASV;AACjBW,MAAAA,QAAQ,EAAE,EAViB;AAUb;AACdC,MAAAA,QAAQ,EAAE,EAXiB;AAWb;AACdX,MAAAA,iBAAiB,EAAE,CAZQ;AAYL;AACtBY,MAAAA,cAAc,EAAE,CAbW;AAaR;AACnBX,MAAAA,WAAW,EAAE,CAdc;AAcX;AAChBY,MAAAA,MAAM,EAAE,EAfmB;AAef;AACZC,MAAAA,MAAM,EAAE,CAhBmB;AAgBhB;AACXC,MAAAA,OAAO,EAAE,EAjBkB;AAiBd;AACbC,MAAAA,QAAQ,EAAE,CAlBiB,CAkBf;;AAlBe,K;;8EAqB5B9B,M;;;;;WAAoB,CAACc,iBAAD,EAA4BC,WAA5B,KAAoD;AACvE,WAAKgB,OAAL,CAAajB,iBAAb,GAAiCA,iBAAjC;AACA,WAAKiB,OAAL,CAAahB,WAAb,GAA2BA,WAA3B;AACD,K;;0EAEAf,M;;;;;WAAgB,MAAM;AACrB,WAAKY,IAAL,CAAUI,OAAV,GAAoB,KAApB;AACAV,MAAAA,cAAc,CAAC0B,KAAf;AACD,K;;8EAEAhC,M;;;;;WAAqBY,IAAD,IAAoB;AACvC,WAAKA,IAAL,GAAYA,IAAZ;AACAN,MAAAA,cAAc,CAAC2B,OAAf,CAAuB,MAAvB,EAA+BxB,IAAI,CAACyB,SAAL,CAAetB,IAAf,CAA/B;AACD,K;;wDAEAb,Q;AAIH,eAAeI,SAAf","sourcesContent":["import { observable, computed, action, makeObservable, autorun } from \"mobx\";\nclass UserState {\n  constructor() {\n    makeObservable(this)\n    /**\n     * 刷新页面走缓存\n     */\n    autorun(() => {\n      const userStr = sessionStorage.getItem('user');\n      if (userStr) {\n        this.updateUser(JSON.parse(userStr));\n      }\n    })\n  }\n  @observable pullRed = {\n    recommendMatchNum: 0,\n    redListHits: 0\n  }\n\n  @observable user: UserData = {\n    isLogin: false,\n    createTime: '',\n    account: '', // 账号\n    fansNumber: 0, // 粉丝数\n    followNumer: 0, // 关注数\n    id: 0, //唯一标识\n    lastLoginTime: '', // 最后登录时间\n    membershipType: 0,\n    mobilePhone: '', // 手机号\n    nickname: '', // 昵称\n    realName: '', // 真实名称\n    recommendMatchNum: 0, // 推荐比赛次数\n    redListHitRate: 0, // 红单率\n    redListHits: 0, // 红单\n    remark: '', // 备注\n    status: 0, // 状态\n    userImg: '', // 用户头像\n    userType: 0 // 用户类型\n  }\n  \n  @action setPullRed = (recommendMatchNum: number, redListHits: number) => {\n    this.pullRed.recommendMatchNum = recommendMatchNum\n    this.pullRed.redListHits = redListHits\n  }\n\n  @action logout = () => {\n    this.user.isLogin = false;\n    sessionStorage.clear();\n  }\n  //登录成功后更新用户\n  @action updateUser = (user: UserData) => {\n    this.user = user\n    sessionStorage.setItem('user', JSON.stringify(user))\n  }\n\n  @computed get msg() {\n    return `${this.user.mobilePhone}`\n  }\n}\nexport default UserState;"]},"metadata":{},"sourceType":"module"}