{"ast":null,"code":"import \"antd-mobile/lib/list-view/style/css\";\nimport _ListView from \"antd-mobile/lib/list-view\";\n\nvar _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nlet rData = [];\nconst listDataSource = new _ListView.DataSource({\n  rowHasChanged: (row1, row2) => row1 !== row2\n});\n\nconst usePaginationHooks = props => {\n  _s();\n\n  const [config, setConfig] = useState({\n    indicator: false,\n    refreshing: true,\n    pageNo: 1,\n    pageSize: 20,\n    isLastPage: false,\n    dataSource: listDataSource\n  });\n  const {\n    queryPages\n  } = props;\n  /**\n   * 下拉刷新\n   */\n\n  const refreshHandle = () => {\n    setTimeout(() => {\n      queryPages({\n        pageNo: 1,\n        pageSize: config.pageSize\n      }).then(res => {\n        const {\n          isLastPage = false,\n          list,\n          redListsVos\n        } = res.data;\n        rData = list;\n        setConfig({ ...config,\n          refreshing: false,\n          indicator: false,\n          isLastPage,\n          dataSource: config.dataSource.cloneWithRows(rData),\n          pageNo: 1\n        });\n      }).catch(err => {\n        setConfig({ ...config,\n          refreshing: false,\n          isLastPage: false,\n          indicator: false\n        });\n      });\n    }, 500);\n  };\n  /**\n  * 上拉更多\n  */\n\n\n  const indicatorHandle = () => {\n    queryPages({\n      pageNo: config.pageNo + 1,\n      pageSize: config.pageSize\n    }).then(res => {\n      const {\n        isLastPage = false,\n        list\n      } = res.data;\n      rData = [...rData, ...list];\n      setConfig({ ...config,\n        indicator: false,\n        isLastPage,\n        dataSource: config.dataSource.cloneWithRows(rData),\n        pageNo: config.pageNo + 1\n      });\n    }).catch(err => {\n      setConfig({ ...config,\n        indicator: false,\n        isLastPage: false,\n        pageNo: config.pageNo + 1\n      });\n    });\n  };\n\n  useEffect(() => {\n    if (!config.refreshing) return;\n    refreshHandle();\n  }, [config.refreshing]);\n  useEffect(() => {\n    if (config.isLastPage) return;\n    config.indicator && indicatorHandle();\n  }, [config.indicator]);\n  return {\n    setIndicator: () => setConfig({ ...config,\n      indicator: true\n    }),\n    setRefresing: () => setConfig({ ...config,\n      refreshing: true\n    }),\n    refreshHandle,\n    indicatorHandle,\n    indicator: config.indicator,\n    refreshing: config.refreshing,\n    isLastPage: config.isLastPage,\n    dataSource: config.dataSource\n  };\n};\n\n_s(usePaginationHooks, \"t2YtcvomcZcJGvSJGPvuZcPyb+w=\");\n\nexport default usePaginationHooks;","map":{"version":3,"sources":["/Users/yuanfang/Downloads/Telegram Desktop/封存/advisory-h5/src/hooks/usePaginationHooks.tsx"],"names":["useState","useEffect","rData","listDataSource","DataSource","rowHasChanged","row1","row2","usePaginationHooks","props","config","setConfig","indicator","refreshing","pageNo","pageSize","isLastPage","dataSource","queryPages","refreshHandle","setTimeout","then","res","list","redListsVos","data","cloneWithRows","catch","err","indicatorHandle","setIndicator","setRefresing"],"mappings":"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","sourcesContent":["import React, { useRef, useState, useEffect } from \"react\"\nimport { ListView } from \"antd-mobile\";\nimport ReactDOM from \"react-dom\"\n\ntype QueryParams = {\n pageNo: number,\n pageSize: number\n}\n\ntype PropsData = {\n queryPages: (arg: QueryParams) => Promise<any>\n}\n\nlet rData: any[] = []\nconst listDataSource = new ListView.DataSource({\n rowHasChanged: (row1: any, row2: any) => row1 !== row2,\n});\n\nconst usePaginationHooks = (props: PropsData) => {\n const [config, setConfig] = useState({ indicator: false, refreshing: true, pageNo: 1, pageSize: 20, isLastPage: false, dataSource: listDataSource })\n const { queryPages } = props;\n\n\n /**\n  * 下拉刷新\n  */\n const refreshHandle = () => {\n  setTimeout(() => {\n   queryPages({ pageNo: 1, pageSize: config.pageSize }).then(res => {\n    const { isLastPage = false, list,redListsVos } = res.data;\n    rData = list\n    setConfig({\n     ...config,\n     refreshing: false,\n     indicator: false,\n     isLastPage,\n     dataSource: config.dataSource.cloneWithRows(rData),\n     pageNo: 1\n    })\n   }).catch(err => {\n    setConfig({\n     ...config,\n     refreshing: false,\n     isLastPage: false,\n     indicator: false,\n    })\n   })\n  }, 500);\n };\n\n /**\n * 上拉更多\n */\n const indicatorHandle = () => {\n  queryPages({ pageNo: config.pageNo + 1, pageSize: config.pageSize }).then(res => {\n   const { isLastPage = false, list } = res.data;\n   rData = [...rData, ...list]\n   setConfig({\n    ...config,\n    indicator: false,\n    isLastPage,\n    dataSource: config.dataSource.cloneWithRows(rData),\n    pageNo: config.pageNo + 1\n   })\n  }).catch(err => {\n   setConfig({\n    ...config,\n    indicator: false,\n    isLastPage: false,\n    pageNo: config.pageNo + 1\n   })\n  })\n }\n\n useEffect(() => {\n  if (!config.refreshing) return;\n  refreshHandle();\n }, [config.refreshing])\n\n useEffect(() => {\n  if (config.isLastPage) return;\n  config.indicator && indicatorHandle();\n }, [config.indicator])\n\n return {\n  setIndicator: () => setConfig({ ...config, indicator: true }),\n  setRefresing: () => setConfig({ ...config, refreshing: true }),\n  refreshHandle,\n  indicatorHandle,\n  indicator: config.indicator,\n  refreshing: config.refreshing,\n  isLastPage: config.isLastPage,\n  dataSource: config.dataSource,\n }\n}\nexport default usePaginationHooks;"]},"metadata":{},"sourceType":"module"}